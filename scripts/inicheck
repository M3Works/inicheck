#!/usr/bin/env python

from inicheck.iniparse import read_config
from inicheck.config import MasterConfig, UserConfig
from inicheck.output import print_config_report,generate_config
from inicheck.utilities import pcfg
import argparse
import os

def main():
    parser = argparse.ArgumentParser(description='Examines Config files for issues.')
    parser.add_argument('config_file', metavar='F', type=str,
                        help='Path to config file that needs checking')
    parser.add_argument('master_file', metavar='MF', type=str,
                        help='Path to master config file that used as the standard')
    parser.add_argument('-w', dest='write', action='store_true',
                        help='Determines whether to write out the file with all the defaults')
    args = parser.parse_args()

    if os.path.isfile(args.config_file):
        mcfg = MasterConfig(args.master_file)
        ucfg = UserConfig(args.config_file, mcfg = mcfg)
        ucfg.apply_recipes()
        pcfg(ucfg.cfg)
        # warnings, errors = ucfg.check()
        # print_config_report(warnings,errors)
    else:
        raise IOError('File does not exist.')

    if args.write:
        out_f = './{0}_full.ini'.format(os.path.basename(args.config_file).split('.')[0])
        print("Writing complete config file showing all defaults of values that were not provided...")
        print('{0}'.format(out_f))
        generate_config(ucfg.cfg,mcfg,out_f, inicheck=True)

if __name__ == '__main__':
    main()
