
def generate_config(config,fname, inicheck = False, order_lst = None, titles = None):
    """
    Generates a list of strings to be written and then writes them in the ini file

    Args:
        config - Config file dictionary created by :func:`~smrf.utils.io.read_config'.
        fname - String path to the output location for the new config file.
        inicheck - Boolean value that adds the line generated using inicheck to config, Default = False

    Returns:
        None
    """

    # find output of 'git describe'
    gitVersion = utils.getgitinfo()

    #Header surround each commented titles in the ini file
    section_header = ('#'*80) + '\n' + ('# {0}\n') +('#'*80)

    #Dictionaries do not go in order so we provide the order here
    if order_lst == None:
        order_lst = ['topo',
                      'time',
                      'stations',
                      'csv',
                      'mysql',
                      'gridded',
                      'air_temp',
                      'vapor_pressure',
                      'wind',
                      'precip',
                      'albedo',
                      'solar',
                      'thermal',
                      'soil_temp',
                      'output',
                      'logging',
                      'system'
                      ]

    #Dictionary of commented section titles
    if titles == None:
        titles = {'topo': "Files for DEM and vegetation",
                  'time': "Dates to run model",
                  'stations': "Stations to use",
                  'csv': "CSV data files",
                  'mysql': "MySQL database",
                  'gridded': "Gridded dataset i.e. wrf_out",
                  'air_temp': "Air temperature distribution",
                  'vapor_pressure': "Vapor pressure distribution",
                  'wind': "Wind speed and wind direction distribution",
                  'precip': "Precipitation distribution",
                  'albedo': "Albedo distribution",
                  'solar': "Solar radiation distribution",
                  'thermal': "Thermal radiation distribution",
                  'soil_temp': " Soil temperature",
                  'output': "Output variables",
                  'logging': "Logging",
                  'system': "System variables"
                }

    #Construct the section strings
    config_str="#"*80

    #File header
    config_str += """
#
# Configuration file for SMRF {0}
# Date generated: {1}
""".format(gitVersion, date.today())

    if inicheck:
        config_str+= "# Generated using: inicheck <filename> -w \n# "

    config_str+="""
# For details on configuration file syntax see:
# https://docs.python.org/2/library/configparser.html
#
# For more SMRF related help see:
# http://smrf.readthedocs.io/en/latest/
"""

    #Check for one of the three data set options
    user_sections = config.keys()
    if 'csv' in user_sections:
        if 'mysql' in order_lst:
            order_lst.remove('mysql')
        if 'gridded' in order_lst:
            order_lst.remove('gridded')

    elif 'mysql' in user_sections:
        if 'csv' in order_lst:
            order_lst.remove('csv')
        if 'gridded' in order_lst:
            order_lst.remove('gridded')

    elif 'gridded' in user_sections:
        if 'stations' in order_lst:
            order_lst.remove('stations')
        if 'csv' in order_lst:
            order_lst.remove('csv')
        if 'mysql' in order_lst:
            order_lst.remove('mysql')


    #Generate the string for the file, creating them in order.
    for section in order_lst:
        #Add the header
        config_str+='\n'*2
        config_str+=section_header.format(titles[section])
        config_str+='\n'
        config_str+='\n[{0}]\n'.format(section)
        #Add section items and values
        for k,v in config.get(section).items():
            if type(v) == list:
                astr = ", ".join(str(c.strip()) for c in v)
            else:
                astr = str(v)
            config_str+="{0:<30} {1:<10}\n".format((k+':'),astr)

    #Write out the string generated
    with open(os.path.abspath(fname),'w') as f:
        f.writelines(config_str)
        f.close()

def print_config_report(warnings, errors, logger= None):
    """
    Pass in the list of string messages generated by check_config file.
    print out in a pretty format the issues

    Args:
        warnings - List of non-critical messages returned from :func:`~smrf.utils.io.check_config'.
        errors - List of critical messages returned from :func:`~smrf.utils.io.check_config'.
        logger - pass in the logger function being used. If no logger is provided, print is used. Default = None

    Returns:
        None
    """

    msg = "{: <20} {: <25} {: <60}"

    #Check to see if user wants the logger or stdout
    if logger != None:
        out = logger.info
    else:
        out = print


    msg_len = 110
    out(" ")
    out(" ")
    out("Configuration File Status Report:")
    header = "="*msg_len
    out(header)
    any_warnings = False
    any_errors = False

    #Output warnings
    if len(warnings)>0:
        any_warnings=True
        out("WARNINGS:")
        out(" ")
        out(msg.format(" Section","Item", "Message"))
        out("-"*msg_len)
        for w in warnings:
            out(w)
        out(" ")
        out(" ")

    #Output errors
    if len(errors)>0:
        any_errors=True
        out("ERRORS:")
        out(" ")
        out(msg.format("Section","Item", "Message"))
        out("-"*msg_len)
        for e in errors:
            out(e)
        out(" ")
        out(" ")

    if not any_errors and not any_warnings:
        out("No errors or warnings were reported with the config file.\n")
